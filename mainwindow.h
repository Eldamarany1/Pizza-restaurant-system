// mainwindow.h
#ifndef MAINWINDOW_H           // Include guard: prevents multiple inclusion
#define MAINWINDOW_H

#include <QMainWindow>         // Qt main window base class
#include <vector>              // For std::vector
#include <QString>             // Qt string class

// forward declaration of the UI class generated by Qt's uic
namespace Ui {
class MainWindow;
}

// ——— Business logic classes ———

// Represents one pizza type
class Pizza {
public:
    Pizza(const QString &name, double price); // ctor: set name & price
    QString name() const;                     // getter: pizza name
    double  price() const;                    // getter: price

private:
    QString m_name;    // stores the pizza’s name
    double  m_price;   // stores unit price
};

// Represents one line in the order (pizza + qty)
class OrderItem {
public:
    OrderItem(const Pizza &pizza, int qty);   // ctor: pizza + quantity
    Pizza   pizza() const;                    // getter: the Pizza
    int     quantity() const;                 // getter: quantity
    double  totalPrice() const;               // computes price * qty

private:
    Pizza m_pizza;   // the selected Pizza
    int   m_qty;     // how many
};

// Represents the entire customer order
class Order {
public:
    Order() = default;                        // default ctor
    void addItem(const OrderItem &item);      // add a line item
    double total() const;                     // sum of all items
    const std::vector<OrderItem>& items() const; // access all items
    void clear();                             // remove all items

private:
    std::vector<OrderItem> m_items;           // container of OrderItem
};

// Payment methods supported
enum class PaymentMethod {
    Cash,           // cash
    CreditCard,     // credit card
    MobilePay       // mobile payment
};

// Handles processing a payment for an Order
class Payment {
public:
    Payment(const Order &order, PaymentMethod method); // ctor
    bool   process();           // perform the (simulated) payment
    double amount() const;      // amount charged
    PaymentMethod method() const; // which method

private:
    Order         m_order;     // copy of the order
    PaymentMethod m_method;    // chosen method
    double        m_amount;    // amount to charge
};

// ——— Qt MainWindow class ———

class MainWindow : public QMainWindow {
    Q_OBJECT                       // enables Qt’s signal/slot mechanism

public:
    explicit MainWindow(QWidget *parent = nullptr); // ctor
    ~MainWindow();                 // dtor

private slots:
    void on_addToOrderButton_clicked(); // called when “Add to Order” is clicked
    void on_payNowButton_clicked();     // called when “Pay Now” is clicked

private:
    Ui::MainWindow  *ui;          // pointer to the UI elements
    std::vector<Pizza>  m_menu;   // list of available pizzas
    Order               m_currentOrder; // current customer order
};

#endif // MAINWINDOW_H
